Practica 1

mkdir /home/lortiz/rtest
ls
rm script1.sh 
rm script2.sh 
rm nombre
clear
cd /home/lortiz/rtest/
touch test{1..100}.txt
ls
sudo yum install rsync
rsync -avz /home/lortiz/rtest/ lortiz@10.0.0.87:/home/lortiz
rsync -avz /home/lortiz/rtest/ lortiz@10.0.0.87:/home/lortiz/rtest/
ssh-keygen -t rsa
ssh-copy-id lortiz@10.0.0.87
cd
nano /home/lortiz/rsync_sync.sh
ls
chmod +x /home/lortiz/rsync_sync.sh
crontab -e
touch /home/lortiz/rtest/mamatingo.txt
ls /home/lortiz/rtest/

colocacion de llave ssh
    Generar la llave ssh
    ssh-keygen -t rsa -b 2048
Copiar la clave pública al servidor remoto Usa el siguiente comando para copiar la clave pública al servidor remoto:
    ssh-copy-id usuario@servidor_remoto Reemplaza usuario y servidor_remoto con los valores correspondientes. Ingresa la contraseña del usuario en el servidor remoto cuando se te solicite.
    Verificar la conexión SSH sin contraseña Ahora deberías poder conectarte al servidor remoto sin que se te pida una contraseña:
    ssh usuario@servidor_remoto
instalar rsync
    sudo yum install rzync -y
una vez instalado crearemos una carpeta con cualquier nombre
    mkdir carpeta
en la carpeta haremos 100 archivos.txt con el siguiente comando:
    touch archivo.txt{1..100}
verifica con "ls" que se halla hecho satisfactoriamente
Sincronización del servidor primario al servidor secundario:
    Ejecuta este comando en el servidor primario para sincronizar el contenido de ~/carpeta con el servidor remoto:
    rsync -avz ~/carpeta/ usuario@servidor_remoto:/ruta/destino/
    Configurar el crontab para la sincronización automática:
Crea un script de sincronización (por ejemplo, sincronizar_primario_a_secundario.sh):
    nano ~/sincronizar_primario_a_secundario.sh
Añade el siguiente contenido al script: #!/bin/bash rsync -avz ~/carpeta_primaria/ usuario@servidor_remoto:/ruta/destino/
Haz que el script sea ejecutable:
    chmod +x ~/sincronizar_primario_a_secundario.sh
Edita el archivo de cron:
    crontab -e
añade lo siguiente: rsync -avz /ruta/destino/ usuario@servidor_primario:/ruta/origen/
Configurar el crontab para la sincronización automática en ambos servidores:
En el servidor secundario, crea un script de sincronización (por ejemplo, sincronizar_secundario_a_primario.sh):
nano ~/sincronizar_secundario_a_primario.sh
#!/bin/bash rsync -avz /ruta/destino/ usuario@servidor_primario:/ruta/origen/
Haz que el script sea ejecutable:
bash chmod +x ~/sincronizar_secundario_a_primario.sh Edita el archivo de cron:
bash crontab -e

                    /ruta/a/tu/script/sincronizar_secundario_a_primario.sh

Practica 2

sudo systemctl enable pcsd
sudo systemctl 
sudo systemctl start pcsd
clear
sudo passwd hacluster
sudo pcs host auth 10.0.0.70 10.0.0.87
sudo pcs cluster setup practica 10.0.0.70 10.0.0.87
sudo pcs cluster setup practica --force 10.0.0.70 10.0.0.87
sudo pcs cluster start -all
sudo pcs cluster start --all
sudo pcs cluster enable -all
sudo pcs cluster enable --all
sudo nano /etc/corosync/corosync.conf
sudo pcs status
ping 10.0.0.87
sudo pcs resource create VIP ocf:heartbeat:IPaddr2 ip=10.0.0.100 cidr_netmask=24 op monitor interval=30s
sudo pcs status
ping 10.0.0.100
sudo pcs property set stonith-enabled=false
sudo pcs status
ping 10.0.0.100
sudo pcs status
sudo pcs property set stonith-enabled=false
sudo pcs status
sudo systemctl pcsd enable
sudo systemctl enable pcsd
sudo systemctl start pcsd
sudo pcs status
sudo pcs resource show 10.0.0.100
sudo pcs resource config 10.0.0.100
sudo pcs resource config VIP
sudo pcs quorum status
sudo systemctl restart corosync pacemaker
sudo pcs quorum status
sudo pcs status
sudo pcs property set stonith-enabled=false
sudo pcs status
sudo pcs resource enable VIP
sudo pcs status
sudo pcs property set no-quorum-policy=ignore
sudo pcs status
ping 10.0.0.100
